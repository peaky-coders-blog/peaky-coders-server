generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  username String
  email    String     @unique
  avatar   String
  from     E_UserFrom

  Article             Article[]
  ArticleComments     ArticleComment[]
  ArticleCommentVotes ArticleCommentVotes[]
  ArticleReactions    ArticleReaction[]     @relation("ArticleReactionOnUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum E_UserFrom {
  GITHUB
  GITLAB
}

model Article {
  id       Int             @id @default(autoincrement())
  title    String          @db.VarChar(255)
  content  String
  status   E_ArticleStatus
  author   User            @relation(fields: [authorId], references: [id])
  authorId Int

  tags Tag[] @relation("TagsOnArticles")

  ArticleComment  ArticleComment[]
  ArticleReaction ArticleReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum E_ArticleStatus {
  DRAFT
  CHECKED
  PUBLISHED
}

model ArticleComment {
  id        Int    @id @default(autoincrement())
  text      String
  articleId Int

  votes               Int
  articleCommentVotes ArticleCommentVotes[]

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  articleComment ArticleComment?  @relation("ArticleComment", fields: [parentId], references: [id])
  subcomments    ArticleComment[] @relation("ArticleComment")
  parentId       Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleCommentVotes {
  id Int @id @default(autoincrement())

  articleComment   ArticleComment @relation(fields: [articleCommentId], references: [id], onDelete: Cascade)
  articleCommentId Int

  authorCommentVote User @relation(fields: [authorId], references: [id])
  authorId          Int
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  icon        String?

  articles Article[] @relation("TagsOnArticles")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleReaction {
  id      Int @id @default(autoincrement())
  counter Int

  reaction   Reaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
  reactionId Int

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int

  authors User[] @relation("ArticleReactionOnUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  ArticleReaction ArticleReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
